package views

import (
	"strconv"

	"github.com/nkapatos/mindweaver/internal/store"
	"github.com/nkapatos/mindweaver/internal/templates/layouts"
)

// ProviderWithRelations represents a provider with its related data for display
type ProviderWithRelations struct {
	Provider        store.Provider
	LLMServiceConfig store.LlmServiceConfig
	LLMService      store.LlmService
	SystemPrompt    *store.Prompt
}

templ ProvidersPage(providersWithRelations []ProviderWithRelations, editingProvider *store.Provider, llmServiceConfigs []store.LlmServiceConfig, systemPrompts []store.Prompt, activePath string) {
	@layouts.AppLayout("Mindweaver - Providers", "Manage your AI providers", activePath) {
		<div class="container mx-auto px-4 py-8">
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-base-content mb-2">Providers</h1>
				<p class="text-base-content/70">Configure and manage your AI providers and models.</p>
			</div>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Create/Edit Provider Form -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						@ProviderForm(editingProvider, llmServiceConfigs, systemPrompts)
					</div>
				</div>
				<!-- Existing Providers List -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-4">Your Providers</h2>
						if len(providersWithRelations) == 0 {
							<div class="text-center py-8">
								<p class="text-base-content/60">No providers configured yet. Create your first provider using the form.</p>
							</div>
						} else {
							<div class="space-y-4">
								for _, providerData := range providersWithRelations {
									<div class="border border-base-300 rounded-lg p-4">
										<div class="flex justify-between items-start mb-2">
											<div>
												<h3 class="font-semibold text-lg">{ providerData.Provider.Name }</h3>
												if providerData.Provider.Description.Valid {
													<p class="text-sm text-base-content/70">{ providerData.Provider.Description.String }</p>
												}
											</div>
										</div>
										<div class="grid grid-cols-2 gap-2 text-xs text-base-content/50 mb-3">
											<div>
												<span class="font-medium">LLM Service:</span>
												<p class="truncate">{ providerData.LLMService.Name }</p>
											</div>
											<div>
												<span class="font-medium">Configuration:</span>
												<p class="truncate">{ providerData.LLMServiceConfig.Name }</p>
											</div>
											if providerData.SystemPrompt != nil {
												<div>
													<span class="font-medium">System Prompt:</span>
													<p class="truncate">{ providerData.SystemPrompt.Title }</p>
												</div>
											} else {
												<div>
													<span class="font-medium">System Prompt:</span>
													<p class="truncate text-base-content/40">None</p>
												</div>
											}
										</div>
										<div class="flex justify-between items-center text-xs text-base-content/50 mb-3">
											<span>ID: { strconv.FormatInt(providerData.Provider.ID, 10) }</span>
											if providerData.Provider.CreatedAt.Valid {
												<span>Created: { providerData.Provider.CreatedAt.Time.Format("2006-01-02 15:04:05") }</span>
											}
										</div>
										<div class="mt-3 flex gap-2">
											<a href={ templ.SafeURL("/providers/edit/" + strconv.FormatInt(providerData.Provider.ID, 10)) } class="btn btn-sm btn-outline">
												Edit
											</a>
											<a href={ templ.SafeURL("/providers/" + strconv.FormatInt(providerData.Provider.ID, 10) + "/settings") } class="btn btn-sm btn-outline">
												Settings
											</a>
											<a href={ templ.SafeURL("/providers/" + strconv.FormatInt(providerData.Provider.ID, 10) + "/models") } class="btn btn-sm btn-outline">
												Models
											</a>
											<form action="/providers/delete" method="POST" class="inline" onsubmit="return confirm('Are you sure you want to delete this provider? This will also delete all associated settings and models.')">
												<input type="hidden" name="id" value={ strconv.FormatInt(providerData.Provider.ID, 10) }/>
												<button type="submit" class="btn btn-sm btn-error">
													Delete
												</button>
											</form>
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

templ ProviderForm(editingProvider *store.Provider, llmServiceConfigs []store.LlmServiceConfig, systemPrompts []store.Prompt) {
	if editingProvider != nil {
		<div class="flex items-center gap-4 mb-4">
			<h2 class="card-title text-xl">Edit Provider</h2>
			<a href="/providers" class="btn btn-ghost btn-sm">
				‚Üê Back to Create
			</a>
		</div>
		<form action={ templ.SafeURL("/providers/edit/" + strconv.FormatInt(editingProvider.ID, 10)) } method="POST" class="space-y-4">
			@ProviderFormFields(editingProvider, llmServiceConfigs, systemPrompts)
			<div class="flex gap-3">
				<a href="/providers" class="btn btn-outline flex-1">
					Cancel
				</a>
				<button type="submit" class="btn btn-primary flex-1">
					Update Provider
				</button>
			</div>
		</form>
	} else {
		<h2 class="card-title text-xl mb-4">Create New Provider</h2>
		<form action="/providers" method="POST" class="space-y-4">
			@ProviderFormFields(nil, llmServiceConfigs, systemPrompts)
			<button type="submit" class="btn btn-primary w-full">
				Create Provider
			</button>
		</form>
	}
}

templ ProviderFormFields(editingProvider *store.Provider, llmServiceConfigs []store.LlmServiceConfig, systemPrompts []store.Prompt) {
	<div>
		<label class="label" for="name">
			<span class="label-text font-medium">Provider Name</span>
		</label>
		<input
			type="text"
			id="name"
			name="name"
			class="input input-bordered w-full"
			placeholder="e.g., Creative GPT-4, Analytical Claude"
			if editingProvider != nil {
				value={ editingProvider.Name }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="llm_service_config_id">
			<span class="label-text font-medium">LLM Service Configuration</span>
		</label>
		<select id="llm_service_config_id" name="llm_service_config_id" class="select select-bordered w-full" required>
			<option value="">Select LLM service configuration</option>
			for _, config := range llmServiceConfigs {
				<option
					value={ strconv.FormatInt(config.ID, 10) }
					if editingProvider != nil && editingProvider.LlmServiceConfigID == config.ID {
						selected
					}
				>{ config.Name }</option>
			}
		</select>
		<p class="text-xs text-base-content/60 mt-1">Choose a specific model configuration (e.g., "Creative GPT-4", "Analytical Claude")</p>
	</div>
	<div>
		<label class="label" for="system_prompt_id">
			<span class="label-text font-medium">System Prompt (Optional)</span>
		</label>
		<select id="system_prompt_id" name="system_prompt_id" class="select select-bordered w-full">
			<option value="">No system prompt</option>
			for _, prompt := range systemPrompts {
				<option
					value={ strconv.FormatInt(prompt.ID, 10) }
					if editingProvider != nil && editingProvider.SystemPromptID.Valid && editingProvider.SystemPromptID.Int64 == prompt.ID {
						selected
					}
				>{ prompt.Title }</option>
			}
		</select>
	</div>
	<div>
		<label class="label" for="description">
			<span class="label-text font-medium">Description</span>
		</label>
		<textarea
			id="description"
			name="description"
			class="textarea textarea-bordered w-full h-20"
			placeholder="What this provider is used for"
			required
		>
		if editingProvider != nil && editingProvider.Description.Valid {
			{editingProvider.Description.String}
		}
		</textarea>
	</div>
}
