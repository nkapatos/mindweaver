package views

import (
	"strconv"

	"github.com/nkapatos/mindweaver/config"
	"github.com/nkapatos/mindweaver/internal/store"
	"github.com/nkapatos/mindweaver/internal/templates/layouts"
)

// PromptWithRelations represents a prompt with its related data for display
type PromptWithRelations struct {
	Prompt store.Prompt
	Actor  *store.Actor
}

templ PromptsPage(title, description string) {
	@layouts.AppLayout(title, description) {
		<div class="container mx-auto px-4 py-8">
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-base-content mb-2">Prompts</h1>
				<p class="text-base-content/70">Create and manage your system prompts and templates.</p>
			</div>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				{ children... }
			</div>
		</div>
	}
}

templ PromptsList(promptsWithRelations []PromptWithRelations) {
	@PromptsPage("Prompts", "Create and manage your system prompts and templates.") {
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body">
				<h2 class="card-title text-xl mb-4">Your Prompts</h2>
				if len(promptsWithRelations) == 0 {
					<div class="text-center py-8">
						<p class="text-base-content/60">No prompts created yet. Create your first prompt using the form.</p>
					</div>
				} else {
					<div class="space-y-4">
						for _, promptData := range promptsWithRelations {
							<div class="border border-base-300 rounded-lg p-4">
								<div class="flex justify-between items-start mb-2">
									<div>
										<h3 class="font-semibold text-lg">{ promptData.Prompt.Title }</h3>
									</div>
									<div class="badge badge-outline">
										if promptData.Prompt.IsSystem.Valid && promptData.Prompt.IsSystem.Int64 == 1 {
											System
										} else {
											User
										}
									</div>
								</div>
								<div class="text-sm text-base-content/60 mb-3">
									<p class="line-clamp-3">{ promptData.Prompt.Content }</p>
								</div>
								<div class="flex justify-between items-center text-xs text-base-content/50 mb-3">
									<span>ID: { strconv.FormatInt(promptData.Prompt.ID, 10) }</span>
									if promptData.Prompt.CreatedAt.Valid {
										<span>Created: { promptData.Prompt.CreatedAt.String }</span>
									}
								</div>
								<div class="mt-3 flex gap-2">
									<a href={ templ.SafeURL(config.RoutePrompts + "/" + strconv.FormatInt(promptData.Prompt.ID, 10) + "/" + config.RESTActionEdit) } class="btn btn-sm btn-outline">
										Edit
									</a>
									<form action={ config.RoutePrompts + "/" + strconv.FormatInt(promptData.Prompt.ID, 10) + "/" + config.RESTActionDelete } method="POST" class="inline" onsubmit="return confirm('Are you sure you want to delete this prompt?')">
										<input type="hidden" name="id" value={ strconv.FormatInt(promptData.Prompt.ID, 10) }/>
										<button type="submit" class="btn btn-sm btn-error">
											Delete
										</button>
									</form>
								</div>
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
}

templ PromptDetailsForm(editingPrompt *store.Prompt) {
	@PromptsPage("Prompts", "Create and manage your system prompts and templates.") {
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body">
				if editingPrompt != nil {
					<div class="flex items-center gap-4 mb-4">
						<h2 class="card-title text-xl">Edit Prompt</h2>
						<a href={ config.RoutePrompts } class="btn btn-ghost btn-sm">
							‚Üê Back to Create
						</a>
					</div>
					<form action={ templ.SafeURL(config.RoutePrompts + "/" + strconv.FormatInt(editingPrompt.ID, 10) + "/" + config.RESTActionEdit) } method="POST" class="space-y-4">
						@PromptFormFields(editingPrompt)
						<div class="flex gap-3">
							<a href={ config.RoutePrompts } class="btn btn-outline flex-1">
								Cancel
							</a>
							<button type="submit" class="btn btn-primary flex-1">
								Update Prompt
							</button>
						</div>
					</form>
				} else {
					<h2 class="card-title text-xl mb-4">Create New Prompt</h2>
					<form action={ config.RoutePrompts } method="POST" class="space-y-4">
						@PromptFormFields(nil)
						<button type="submit" class="btn btn-primary w-full">
							Create Prompt
						</button>
					</form>
				}
			</div>
		</div>
	}
}

templ PromptFormFields(editingPrompt *store.Prompt) {
	<div>
		<label class="label" for="title">
			<span class="label-text font-medium">Prompt Title</span>
		</label>
		<input
			type="text"
			id="title"
			name="title"
			class="input input-bordered w-full"
			placeholder="e.g., Creative Assistant, Code Helper"
			if editingPrompt != nil {
				value={ editingPrompt.Title }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="content">
			<span class="label-text font-medium">Prompt Content</span>
		</label>
		<textarea
			id="content"
			name="content"
			class="textarea textarea-bordered w-full h-32"
			placeholder="Enter your prompt content here..."
			required
		>
			if editingPrompt != nil {
				{ editingPrompt.Content }
			}
		</textarea>
	</div>
	<label class="label cursor-pointer">
		<span class="label-text font-medium">System Prompt</span>
		<input
			type="checkbox"
			id="is_system"
			name="is_system"
			class="checkbox checkbox-primary"
			value="1"
			if editingPrompt != nil && editingPrompt.IsSystem.Valid && editingPrompt.IsSystem.Int64 == 1 {
				checked
			}
		/>
	</label>
	<label class="label">
		<span class="label-text-alt text-base-content/60">
			System prompts are used as default templates
		</span>
	</label>
}
