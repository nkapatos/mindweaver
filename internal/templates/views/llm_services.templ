package views

import (
	"strconv"

	"github.com/nkapatos/mindweaver/internal/store"
	"github.com/nkapatos/mindweaver/internal/templates/layouts"
)

templ LLMServicesPage(llmServices []store.LlmService, editingService *store.LlmService, adapters []string, activePath string) {
	@layouts.AppLayout("Mindweaver - LLM Services", "Manage your LLM services", activePath) {
		<div class="container mx-auto px-4 py-8">
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-base-content mb-2">LLM Services</h1>
				<p class="text-base-content/70">Configure external LLM services like OpenAI, Anthropic, and others.</p>
			</div>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Create/Edit LLM Service Form -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						@LLMServiceForm(editingService, adapters)
					</div>
				</div>
				<!-- Existing LLM Services List -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-4">Your LLM Services</h2>
						if len(llmServices) == 0 {
							<div class="text-center py-8">
								<p class="text-base-content/60">No LLM services configured yet. Create your first service using the form.</p>
							</div>
						} else {
							<div class="space-y-4">
								for _, service := range llmServices {
									<div class="border border-base-300 rounded-lg p-4">
										<div class="flex justify-between items-start mb-2">
											<h3 class="font-semibold text-lg">{ service.Name }</h3>
											<span class="badge badge-secondary badge-sm">{ service.Adapter }</span>
										</div>
										if service.Description.Valid {
											<p class="text-base-content/70 text-sm mb-3">{ service.Description.String }</p>
										}
										<div class="grid grid-cols-2 gap-2 text-xs text-base-content/50 mb-3">
											<div>
												<span class="font-medium">Base URL:</span>
												<p class="truncate">{ service.BaseUrl }</p>
											</div>
											if service.Organization.Valid {
												<div>
													<span class="font-medium">Organization:</span>
													<p class="truncate">{ service.Organization.String }</p>
												</div>
											}
										</div>
										<div class="flex justify-between items-center text-xs text-base-content/50">
											<span>ID: { strconv.FormatInt(service.ID, 10) }</span>
											if service.CreatedAt.Valid {
												<span>Created: { service.CreatedAt.Time.Format("2006-01-02 15:04") }</span>
											}
										</div>
										<div class="mt-3 flex gap-2">
											<a href={ templ.SafeURL("/llm-services/edit/" + strconv.FormatInt(service.ID, 10)) } class="btn btn-sm btn-outline">
												Edit
											</a>
											<form action="/llm-services/delete" method="POST" class="inline" onsubmit="return confirm('Are you sure you want to delete this LLM service?')">
												<input type="hidden" name="id" value={ strconv.FormatInt(service.ID, 10) }/>
												<button type="submit" class="btn btn-sm btn-error">
													Delete
												</button>
											</form>
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

templ LLMServiceForm(editingService *store.LlmService, adapters []string) {
	if editingService != nil {
		<div class="flex items-center gap-4 mb-4">
			<h2 class="card-title text-xl">Edit LLM Service</h2>
			<a href="/llm-services" class="btn btn-ghost btn-sm">
				‚Üê Back to Create
			</a>
		</div>
		<form action={ templ.SafeURL("/llm-services/edit/" + strconv.FormatInt(editingService.ID, 10)) } method="POST" class="space-y-4">
			@LLMServiceFormFields(editingService, adapters)
			<div class="flex gap-3">
				<a href="/llm-services" class="btn btn-outline flex-1">
					Cancel
				</a>
				<button type="submit" class="btn btn-primary flex-1">
					Update Service
				</button>
			</div>
		</form>
	} else {
		<h2 class="card-title text-xl mb-4">Create New LLM Service</h2>
		<form action="/llm-services" method="POST" class="space-y-4">
			@LLMServiceFormFields(nil, adapters)
			<button type="submit" class="btn btn-primary w-full">
				Create Service
			</button>
		</form>
	}
}

templ LLMServiceFormFields(editingService *store.LlmService, adapters []string) {
	<div>
		<label class="label" for="name">
			<span class="label-text font-medium">Service Name</span>
		</label>
		<input
			type="text"
			id="name"
			name="name"
			class="input input-bordered w-full"
			placeholder="e.g., OpenAI, Anthropic, Local"
			if editingService != nil {
				value={ editingService.Name }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="description">
			<span class="label-text font-medium">Description</span>
		</label>
		<input
			type="text"
			id="description"
			name="description"
			class="input input-bordered w-full"
			placeholder="Brief description of the service"
			if editingService != nil && editingService.Description.Valid {
				value={ editingService.Description.String }
			}
		/>
	</div>
	<div>
		<label class="label" for="adapter">
			<span class="label-text font-medium">Adapter</span>
		</label>
		<select id="adapter" name="adapter" class="select select-bordered w-full" required>
			<option value="">Select an adapter</option>
			<!-- TODO: Update this to use dynamic adapter discovery from the service layer when we implement adapter registration -->
			for _, adapter := range adapters {
				<option
					value={ adapter }
					if editingService != nil && editingService.Adapter == adapter {
						selected
					}
				>{ adapter }</option>
			}
		</select>
	</div>
	<div>
		<label class="label" for="api_key">
			<span class="label-text font-medium">API Key</span>
		</label>
		<input
			type="password"
			id="api_key"
			name="api_key"
			class="input input-bordered w-full"
			placeholder="Enter your API key"
			if editingService != nil {
				value={ editingService.ApiKey }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="base_url">
			<span class="label-text font-medium">Base URL</span>
		</label>
		<input
			type="url"
			id="base_url"
			name="base_url"
			class="input input-bordered w-full"
			placeholder="https://api.openai.com/v1"
			if editingService != nil {
				value={ editingService.BaseUrl }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="organization">
			<span class="label-text font-medium">Organization (Optional)</span>
		</label>
		<input
			type="text"
			id="organization"
			name="organization"
			class="input input-bordered w-full"
			placeholder="Organization ID or name"
			if editingService != nil && editingService.Organization.Valid {
				value={ editingService.Organization.String }
			}
		/>
	</div>
	<div>
		<label class="label" for="configuration">
			<span class="label-text font-medium">Configuration (JSON)</span>
		</label>
		<textarea
			id="configuration"
			name="configuration"
			class="textarea textarea-bordered w-full h-24"
			placeholder='{"temperature": 0.7, "max_tokens": 1000}'
			required
		>
		if editingService != nil {
			{editingService.Configuration}
		}
		</textarea>
	</div>
} 