package views

import (
	"strconv"

	"github.com/nkapatos/mindweaver/config"
	"github.com/nkapatos/mindweaver/internal/store"
	"github.com/nkapatos/mindweaver/internal/templates/layouts"
)

// LLMServiceWithRelations represents an LLM service with its related data for display
type LLMServiceWithRelations struct {
	LLMService store.LlmService
	Configs    []store.LlmServiceConfig
}

templ LLMServicesPage(title, description string) {
	@layouts.AppLayout(title, description) {
		<div class="container mx-auto px-4 py-8">
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-base-content mb-2">LLM Services</h1>
				<p class="text-base-content/70">Configure and manage your LLM service connections.</p>
			</div>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				{ children... }
			</div>
		</div>
	}
}

templ LLMServicesList(llmServicesWithRelations []LLMServiceWithRelations) {
	@LLMServicesPage("LLM Services", "Configure and manage your LLM service connections.") {
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body">
				<div class="flex justify-between items-center mb-4">
					<h2 class="card-title text-xl">Your LLM Services</h2>
					<a href={ templ.SafeURL(config.RouteLLMServices + "/" + config.RESTActionNew) } class="btn btn-primary btn-sm">
						Create New LLM Service
					</a>
				</div>
				if len(llmServicesWithRelations) == 0 {
					<div class="text-center py-8">
						<p class="text-base-content/60">No LLM services configured yet. Create your first service using the form.</p>
					</div>
				} else {
					<div class="space-y-4">
						for _, serviceData := range llmServicesWithRelations {
							<div class="border border-base-300 rounded-lg p-4">
								<div class="flex justify-between items-start mb-2">
									<div>
										<h3 class="font-semibold text-lg">{ serviceData.LLMService.Name }</h3>
										<p class="text-sm text-base-content/70">{ serviceData.LLMService.Adapter }</p>
									</div>
								</div>
								<div class="grid grid-cols-2 gap-2 text-xs text-base-content/50 mb-3">
									<div>
										<span class="font-medium">Configurations:</span>
										<p class="truncate">{ strconv.FormatInt(int64(len(serviceData.Configs)), 10) }</p>
									</div>
									<div>
										<span class="font-medium">API Key:</span>
										<p class="truncate">••••••••</p>
									</div>
								</div>
								<div class="flex justify-between items-center text-xs text-base-content/50 mb-3">
									<span>ID: { strconv.FormatInt(serviceData.LLMService.ID, 10) }</span>
									if serviceData.LLMService.CreatedAt.Valid {
										<span>Created: { serviceData.LLMService.CreatedAt.Time.Format("2006-01-02 15:04:05") }</span>
									}
								</div>
								<div class="mt-3 flex gap-2">
									<a href={ templ.SafeURL(config.RouteLLMServices + "/" + strconv.FormatInt(serviceData.LLMService.ID, 10) + "/" + config.RESTActionEdit) } class="btn btn-sm btn-outline">
										Edit
									</a>
									<form action={ config.RouteLLMServices + "/" + strconv.FormatInt(serviceData.LLMService.ID, 10) + "/" + config.RESTActionDelete } method="POST" class="inline" onsubmit="return confirm('Are you sure you want to delete this LLM service?')">
										<input type="hidden" name="id" value={ strconv.FormatInt(serviceData.LLMService.ID, 10) }/>
										<button type="submit" class="btn btn-sm btn-error">
											Delete
										</button>
									</form>
								</div>
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
}

templ LLMServiceDetailsForm(editingService *store.LlmService) {
	@LLMServicesPage("LLM Services", "Configure and manage your LLM service connections.") {
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body">
				if editingService != nil {
					<div class="flex items-center gap-4 mb-4">
						<h2 class="card-title text-xl">Edit LLM Service</h2>
						<a href={ config.RouteLLMServices } class="btn btn-ghost btn-sm">
							← Back to List
						</a>
					</div>
					<form action={ templ.SafeURL(config.RouteLLMServices + "/" + strconv.FormatInt(editingService.ID, 10) + "/" + config.RESTActionEdit) } method="POST" class="space-y-4">
						@LLMServiceFormFields(editingService)
						<div class="flex gap-3">
							<a href={ config.RouteLLMServices } class="btn btn-outline flex-1">
								Cancel
							</a>
							<button type="submit" class="btn btn-primary flex-1">
								Update LLM Service
							</button>
						</div>
					</form>
				} else {
					<div class="flex items-center gap-4 mb-4">
						<h2 class="card-title text-xl">Create New LLM Service</h2>
						<a href={ config.RouteLLMServices } class="btn btn-ghost btn-sm">
							← Back to List
						</a>
					</div>
					<form action={ templ.SafeURL(config.RouteLLMServices + "/" + config.RESTActionCreate) } method="POST" class="space-y-4">
						@LLMServiceFormFields(nil)
						<button type="submit" class="btn btn-primary w-full">
							Create LLM Service
						</button>
					</form>
				}
			</div>
		</div>
	}
}

templ LLMServiceFormFields(editingService *store.LlmService) {
	<div>
		<label class="label" for="name">
			<span class="label-text font-medium">Service Name</span>
		</label>
		<input
			type="text"
			id="name"
			name="name"
			class="input input-bordered w-full"
			placeholder="e.g., OpenAI, Anthropic, Google AI"
			if editingService != nil {
				value={ editingService.Name }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="adapter">
			<span class="label-text font-medium">Adapter</span>
		</label>
		<input
			type="text"
			id="adapter"
			name="adapter"
			class="input input-bordered w-full"
			placeholder="e.g., openai, anthropic, openrouter"
			if editingService != nil {
				value={ editingService.Adapter }
			}
			required
		/>
	</div>
	<div>
		<label class="label" for="api_key">
			<span class="label-text font-medium">API Key</span>
		</label>
		<input
			type="password"
			id="api_key"
			name="api_key"
			class="input input-bordered w-full"
			placeholder="Enter your API key"
			required
		/>
		<p class="text-xs text-base-content/60 mt-1">Your API key will be encrypted and stored securely</p>
	</div>
	<div>
		<label class="label" for="base_url">
			<span class="label-text font-medium">Base URL (Optional)</span>
		</label>
		<input
			type="url"
			id="base_url"
			name="base_url"
			class="input input-bordered w-full"
			placeholder="https://api.openai.com/v1"
			if editingService != nil {
				value={ editingService.BaseUrl }
			}
		/>
		<p class="text-xs text-base-content/60 mt-1">Leave empty to use the default provider URL</p>
	</div>
}
