// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package store

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, actor_id, uuid, content, message_type, metadata, created_by, updated_by) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?) 
RETURNING id, conversation_id, actor_id, uuid, content, message_type, metadata, created_at, updated_at, created_by, updated_by
`

type CreateMessageParams struct {
	ConversationID int64          `json:"conversation_id"`
	ActorID        int64          `json:"actor_id"`
	Uuid           string         `json:"uuid"`
	Content        string         `json:"content"`
	MessageType    sql.NullString `json:"message_type"`
	Metadata       sql.NullString `json:"metadata"`
	CreatedBy      int64          `json:"created_by"`
	UpdatedBy      int64          `json:"updated_by"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ConversationID,
		arg.ActorID,
		arg.Uuid,
		arg.Content,
		arg.MessageType,
		arg.Metadata,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ActorID,
		&i.Uuid,
		&i.Content,
		&i.MessageType,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, conversation_id, actor_id, uuid, content, message_type, metadata, created_at, updated_at, created_by, updated_by 
FROM messages 
WHERE id = ? 
LIMIT 1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ActorID,
		&i.Uuid,
		&i.Content,
		&i.MessageType,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getMessageByUUID = `-- name: GetMessageByUUID :one
SELECT id, conversation_id, actor_id, uuid, content, message_type, metadata, created_at, updated_at, created_by, updated_by 
FROM messages 
WHERE uuid = ? 
LIMIT 1
`

func (q *Queries) GetMessageByUUID(ctx context.Context, uuid string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByUUID, uuid)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ActorID,
		&i.Uuid,
		&i.Content,
		&i.MessageType,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getMessagesByActorID = `-- name: GetMessagesByActorID :many
SELECT id, conversation_id, actor_id, uuid, content, message_type, metadata, created_at, updated_at, created_by, updated_by 
FROM messages 
WHERE actor_id = ? 
ORDER BY uuid DESC
`

func (q *Queries) GetMessagesByActorID(ctx context.Context, actorID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.ActorID,
			&i.Uuid,
			&i.Content,
			&i.MessageType,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByConversationID = `-- name: GetMessagesByConversationID :many
SELECT id, conversation_id, actor_id, uuid, content, message_type, metadata, created_at, updated_at, created_by, updated_by 
FROM messages 
WHERE conversation_id = ? 
ORDER BY uuid ASC
`

func (q *Queries) GetMessagesByConversationID(ctx context.Context, conversationID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.ActorID,
			&i.Uuid,
			&i.Content,
			&i.MessageType,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :exec
UPDATE messages 
SET content = ?, message_type = ?, metadata = ?, updated_at = CURRENT_TIMESTAMP, updated_by = ? 
WHERE id = ?
`

type UpdateMessageParams struct {
	Content     string         `json:"content"`
	MessageType sql.NullString `json:"message_type"`
	Metadata    sql.NullString `json:"metadata"`
	UpdatedBy   int64          `json:"updated_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateMessage,
		arg.Content,
		arg.MessageType,
		arg.Metadata,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
