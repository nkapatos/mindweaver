// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: llm_services.sql

package store

import (
	"context"
	"database/sql"
)

const createLLMService = `-- name: CreateLLMService :one
INSERT INTO llm_services (name, description, adapter, api_key, base_url, organization, created_by, updated_by) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?) 
RETURNING id, name, description, adapter, api_key, base_url, organization, created_at, updated_at, created_by, updated_by
`

type CreateLLMServiceParams struct {
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	Adapter      string         `json:"adapter"`
	ApiKey       string         `json:"api_key"`
	BaseUrl      string         `json:"base_url"`
	Organization sql.NullString `json:"organization"`
	CreatedBy    int64          `json:"created_by"`
	UpdatedBy    int64          `json:"updated_by"`
}

func (q *Queries) CreateLLMService(ctx context.Context, arg CreateLLMServiceParams) (LlmService, error) {
	row := q.db.QueryRowContext(ctx, createLLMService,
		arg.Name,
		arg.Description,
		arg.Adapter,
		arg.ApiKey,
		arg.BaseUrl,
		arg.Organization,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i LlmService
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Adapter,
		&i.ApiKey,
		&i.BaseUrl,
		&i.Organization,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteLLMService = `-- name: DeleteLLMService :exec
DELETE FROM llm_services 
WHERE id = ?
`

func (q *Queries) DeleteLLMService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLLMService, id)
	return err
}

const getAllLLMServices = `-- name: GetAllLLMServices :many
SELECT id, name, description, adapter, api_key, base_url, organization, created_at, updated_at, created_by, updated_by
FROM llm_services 
ORDER BY name
`

func (q *Queries) GetAllLLMServices(ctx context.Context) ([]LlmService, error) {
	rows, err := q.db.QueryContext(ctx, getAllLLMServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LlmService
	for rows.Next() {
		var i LlmService
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Adapter,
			&i.ApiKey,
			&i.BaseUrl,
			&i.Organization,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLLMServiceByID = `-- name: GetLLMServiceByID :one
SELECT id, name, description, adapter, api_key, base_url, organization, created_at, updated_at, created_by, updated_by
FROM llm_services 
WHERE id = ?
`

func (q *Queries) GetLLMServiceByID(ctx context.Context, id int64) (LlmService, error) {
	row := q.db.QueryRowContext(ctx, getLLMServiceByID, id)
	var i LlmService
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Adapter,
		&i.ApiKey,
		&i.BaseUrl,
		&i.Organization,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getLLMServiceByName = `-- name: GetLLMServiceByName :one
SELECT id, name, description, adapter, api_key, base_url, organization, created_at, updated_at, created_by, updated_by
FROM llm_services 
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetLLMServiceByName(ctx context.Context, name string) (LlmService, error) {
	row := q.db.QueryRowContext(ctx, getLLMServiceByName, name)
	var i LlmService
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Adapter,
		&i.ApiKey,
		&i.BaseUrl,
		&i.Organization,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateLLMService = `-- name: UpdateLLMService :exec
UPDATE llm_services 
SET name = ?, description = ?, adapter = ?, api_key = ?, base_url = ?, organization = ?, updated_at = CURRENT_TIMESTAMP, updated_by = ? 
WHERE id = ?
`

type UpdateLLMServiceParams struct {
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	Adapter      string         `json:"adapter"`
	ApiKey       string         `json:"api_key"`
	BaseUrl      string         `json:"base_url"`
	Organization sql.NullString `json:"organization"`
	UpdatedBy    int64          `json:"updated_by"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateLLMService(ctx context.Context, arg UpdateLLMServiceParams) error {
	_, err := q.db.ExecContext(ctx, updateLLMService,
		arg.Name,
		arg.Description,
		arg.Adapter,
		arg.ApiKey,
		arg.BaseUrl,
		arg.Organization,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
