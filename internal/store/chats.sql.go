// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package store

import (
	"context"
	"database/sql"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id) 
VALUES (?, ?, ?, ?, ?, ?, ?) 
RETURNING id, uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id, created_at, updated_at
`

type CreateChatParams struct {
	Uuid           string         `json:"uuid"`
	ConversationID int64          `json:"conversation_id"`
	ActorID        int64          `json:"actor_id"`
	Title          string         `json:"title"`
	ProviderID     sql.NullInt64  `json:"provider_id"`
	ModelName      sql.NullString `json:"model_name"`
	SystemPromptID sql.NullInt64  `json:"system_prompt_id"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.Uuid,
		arg.ConversationID,
		arg.ActorID,
		arg.Title,
		arg.ProviderID,
		arg.ModelName,
		arg.SystemPromptID,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ConversationID,
		&i.ActorID,
		&i.Title,
		&i.ProviderID,
		&i.ModelName,
		&i.SystemPromptID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM chats WHERE id = ?
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChatByID = `-- name: GetChatByID :one
SELECT id, uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id, created_at, updated_at 
FROM chats 
WHERE id = ? 
LIMIT 1
`

func (q *Queries) GetChatByID(ctx context.Context, id int64) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChatByID, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ConversationID,
		&i.ActorID,
		&i.Title,
		&i.ProviderID,
		&i.ModelName,
		&i.SystemPromptID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatByUUID = `-- name: GetChatByUUID :one
SELECT id, uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id, created_at, updated_at 
FROM chats 
WHERE uuid = ? 
LIMIT 1
`

func (q *Queries) GetChatByUUID(ctx context.Context, uuid string) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChatByUUID, uuid)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ConversationID,
		&i.ActorID,
		&i.Title,
		&i.ProviderID,
		&i.ModelName,
		&i.SystemPromptID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatsByActorID = `-- name: GetChatsByActorID :many
SELECT id, uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id, created_at, updated_at 
FROM chats 
WHERE actor_id = ? 
ORDER BY created_at DESC
`

func (q *Queries) GetChatsByActorID(ctx context.Context, actorID int64) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatsByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ConversationID,
			&i.ActorID,
			&i.Title,
			&i.ProviderID,
			&i.ModelName,
			&i.SystemPromptID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatsByConversationID = `-- name: GetChatsByConversationID :many
SELECT id, uuid, conversation_id, actor_id, title, provider_id, model_name, system_prompt_id, created_at, updated_at 
FROM chats 
WHERE conversation_id = ? 
ORDER BY created_at ASC
`

func (q *Queries) GetChatsByConversationID(ctx context.Context, conversationID int64) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChatsByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ConversationID,
			&i.ActorID,
			&i.Title,
			&i.ProviderID,
			&i.ModelName,
			&i.SystemPromptID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatTitle = `-- name: UpdateChatTitle :exec
UPDATE chats 
SET title = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateChatTitleParams struct {
	Title string `json:"title"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateChatTitle(ctx context.Context, arg UpdateChatTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateChatTitle, arg.Title, arg.ID)
	return err
}
