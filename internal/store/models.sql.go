// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: models.sql

package store

import (
	"context"
	"database/sql"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (
    llm_service_id, model_id, name, provider, description, created_at, owned_by
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at
`

type CreateModelParams struct {
	LlmServiceID int64          `json:"llm_service_id"`
	ModelID      string         `json:"model_id"`
	Name         string         `json:"name"`
	Provider     string         `json:"provider"`
	Description  sql.NullString `json:"description"`
	CreatedAt    sql.NullInt64  `json:"created_at"`
	OwnedBy      sql.NullString `json:"owned_by"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, createModel,
		arg.LlmServiceID,
		arg.ModelID,
		arg.Name,
		arg.Provider,
		arg.Description,
		arg.CreatedAt,
		arg.OwnedBy,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.ModelID,
		&i.Name,
		&i.Provider,
		&i.Description,
		&i.CreatedAt,
		&i.OwnedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models WHERE id = ?
`

func (q *Queries) DeleteModel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteModel, id)
	return err
}

const deleteModelsByLLMServiceID = `-- name: DeleteModelsByLLMServiceID :exec
DELETE FROM models WHERE llm_service_id = ?
`

func (q *Queries) DeleteModelsByLLMServiceID(ctx context.Context, llmServiceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteModelsByLLMServiceID, llmServiceID)
	return err
}

const getModelByID = `-- name: GetModelByID :one
SELECT id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at FROM models WHERE id = ?
`

func (q *Queries) GetModelByID(ctx context.Context, id int64) (Model, error) {
	row := q.db.QueryRowContext(ctx, getModelByID, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.ModelID,
		&i.Name,
		&i.Provider,
		&i.Description,
		&i.CreatedAt,
		&i.OwnedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const getModelByServiceAndModelID = `-- name: GetModelByServiceAndModelID :one
SELECT id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at FROM models 
WHERE llm_service_id = ? AND model_id = ?
`

type GetModelByServiceAndModelIDParams struct {
	LlmServiceID int64  `json:"llm_service_id"`
	ModelID      string `json:"model_id"`
}

func (q *Queries) GetModelByServiceAndModelID(ctx context.Context, arg GetModelByServiceAndModelIDParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, getModelByServiceAndModelID, arg.LlmServiceID, arg.ModelID)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.ModelID,
		&i.Name,
		&i.Provider,
		&i.Description,
		&i.CreatedAt,
		&i.OwnedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const getModelsByLLMServiceID = `-- name: GetModelsByLLMServiceID :many
SELECT id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at FROM models 
WHERE llm_service_id = ? 
ORDER BY name
`

func (q *Queries) GetModelsByLLMServiceID(ctx context.Context, llmServiceID int64) ([]Model, error) {
	rows, err := q.db.QueryContext(ctx, getModelsByLLMServiceID, llmServiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceID,
			&i.ModelID,
			&i.Name,
			&i.Provider,
			&i.Description,
			&i.CreatedAt,
			&i.OwnedBy,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModelsLastFetchedBefore = `-- name: GetModelsLastFetchedBefore :many
SELECT id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at FROM models 
WHERE llm_service_id = ? AND last_fetched_at < ?
ORDER BY last_fetched_at
`

type GetModelsLastFetchedBeforeParams struct {
	LlmServiceID  int64        `json:"llm_service_id"`
	LastFetchedAt sql.NullTime `json:"last_fetched_at"`
}

func (q *Queries) GetModelsLastFetchedBefore(ctx context.Context, arg GetModelsLastFetchedBeforeParams) ([]Model, error) {
	rows, err := q.db.QueryContext(ctx, getModelsLastFetchedBefore, arg.LlmServiceID, arg.LastFetchedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceID,
			&i.ModelID,
			&i.Name,
			&i.Provider,
			&i.Description,
			&i.CreatedAt,
			&i.OwnedBy,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastFetched = `-- name: UpdateLastFetched :exec
UPDATE models SET last_fetched_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) UpdateLastFetched(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateLastFetched, id)
	return err
}

const updateModel = `-- name: UpdateModel :one
UPDATE models SET
    name = ?,
    provider = ?,
    description = ?,
    created_at = ?,
    owned_by = ?,
    last_fetched_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, llm_service_id, model_id, name, provider, description, created_at, owned_by, last_fetched_at
`

type UpdateModelParams struct {
	Name        string         `json:"name"`
	Provider    string         `json:"provider"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullInt64  `json:"created_at"`
	OwnedBy     sql.NullString `json:"owned_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, updateModel,
		arg.Name,
		arg.Provider,
		arg.Description,
		arg.CreatedAt,
		arg.OwnedBy,
		arg.ID,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.ModelID,
		&i.Name,
		&i.Provider,
		&i.Description,
		&i.CreatedAt,
		&i.OwnedBy,
		&i.LastFetchedAt,
	)
	return i, err
}
