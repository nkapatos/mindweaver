// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prompts.sql

package store

import (
	"context"
	"database/sql"
)

const createPrompt = `-- name: CreatePrompt :exec
INSERT INTO prompts (actor_id, title, content, is_system) VALUES (?, ?, ?, ?)
`

type CreatePromptParams struct {
	ActorID  sql.NullInt64 `json:"actor_id"`
	Title    string        `json:"title"`
	Content  string        `json:"content"`
	IsSystem sql.NullInt64 `json:"is_system"`
}

func (q *Queries) CreatePrompt(ctx context.Context, arg CreatePromptParams) error {
	_, err := q.db.ExecContext(ctx, createPrompt,
		arg.ActorID,
		arg.Title,
		arg.Content,
		arg.IsSystem,
	)
	return err
}

const deletePrompt = `-- name: DeletePrompt :exec
DELETE FROM prompts WHERE id = ?
`

func (q *Queries) DeletePrompt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePrompt, id)
	return err
}

const getAllPrompts = `-- name: GetAllPrompts :many
SELECT id, actor_id, title, content, is_system, created_at, updated_at FROM prompts
`

type GetAllPromptsRow struct {
	ID        int64          `json:"id"`
	ActorID   sql.NullInt64  `json:"actor_id"`
	Title     string         `json:"title"`
	Content   string         `json:"content"`
	IsSystem  sql.NullInt64  `json:"is_system"`
	CreatedAt sql.NullString `json:"created_at"`
	UpdatedAt sql.NullString `json:"updated_at"`
}

func (q *Queries) GetAllPrompts(ctx context.Context) ([]GetAllPromptsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPromptsRow
	for rows.Next() {
		var i GetAllPromptsRow
		if err := rows.Scan(
			&i.ID,
			&i.ActorID,
			&i.Title,
			&i.Content,
			&i.IsSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromptById = `-- name: GetPromptById :one
SELECT id, actor_id, title, content, is_system, created_at, updated_at FROM prompts WHERE id = ? LIMIT 1
`

type GetPromptByIdRow struct {
	ID        int64          `json:"id"`
	ActorID   sql.NullInt64  `json:"actor_id"`
	Title     string         `json:"title"`
	Content   string         `json:"content"`
	IsSystem  sql.NullInt64  `json:"is_system"`
	CreatedAt sql.NullString `json:"created_at"`
	UpdatedAt sql.NullString `json:"updated_at"`
}

func (q *Queries) GetPromptById(ctx context.Context, id int64) (GetPromptByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPromptById, id)
	var i GetPromptByIdRow
	err := row.Scan(
		&i.ID,
		&i.ActorID,
		&i.Title,
		&i.Content,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromptsByActorID = `-- name: GetPromptsByActorID :many
SELECT id, actor_id, title, content, is_system, created_at, updated_at FROM prompts WHERE actor_id = ?
`

type GetPromptsByActorIDRow struct {
	ID        int64          `json:"id"`
	ActorID   sql.NullInt64  `json:"actor_id"`
	Title     string         `json:"title"`
	Content   string         `json:"content"`
	IsSystem  sql.NullInt64  `json:"is_system"`
	CreatedAt sql.NullString `json:"created_at"`
	UpdatedAt sql.NullString `json:"updated_at"`
}

func (q *Queries) GetPromptsByActorID(ctx context.Context, actorID sql.NullInt64) ([]GetPromptsByActorIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPromptsByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPromptsByActorIDRow
	for rows.Next() {
		var i GetPromptsByActorIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ActorID,
			&i.Title,
			&i.Content,
			&i.IsSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemPrompts = `-- name: GetSystemPrompts :many
SELECT id, actor_id, title, content, is_system, created_at, updated_at FROM prompts WHERE is_system = 1
`

type GetSystemPromptsRow struct {
	ID        int64          `json:"id"`
	ActorID   sql.NullInt64  `json:"actor_id"`
	Title     string         `json:"title"`
	Content   string         `json:"content"`
	IsSystem  sql.NullInt64  `json:"is_system"`
	CreatedAt sql.NullString `json:"created_at"`
	UpdatedAt sql.NullString `json:"updated_at"`
}

func (q *Queries) GetSystemPrompts(ctx context.Context) ([]GetSystemPromptsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSystemPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemPromptsRow
	for rows.Next() {
		var i GetSystemPromptsRow
		if err := rows.Scan(
			&i.ID,
			&i.ActorID,
			&i.Title,
			&i.Content,
			&i.IsSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrompt = `-- name: UpdatePrompt :exec
UPDATE prompts SET title = ?, content = ?, is_system = ?, updated_at = (datetime('now')) WHERE id = ?
`

type UpdatePromptParams struct {
	Title    string        `json:"title"`
	Content  string        `json:"content"`
	IsSystem sql.NullInt64 `json:"is_system"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdatePrompt(ctx context.Context, arg UpdatePromptParams) error {
	_, err := q.db.ExecContext(ctx, updatePrompt,
		arg.Title,
		arg.Content,
		arg.IsSystem,
		arg.ID,
	)
	return err
}
