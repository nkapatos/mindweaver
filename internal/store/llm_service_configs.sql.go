// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: llm_service_configs.sql

package store

import (
	"context"
	"database/sql"
)

const createLLMServiceConfig = `-- name: CreateLLMServiceConfig :one
INSERT INTO llm_service_configs (llm_service_id, name, description, configuration) 
VALUES (?, ?, ?, ?) 
RETURNING id, llm_service_id, name, description, configuration, created_at, updated_at
`

type CreateLLMServiceConfigParams struct {
	LlmServiceID  int64          `json:"llm_service_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Configuration string         `json:"configuration"`
}

func (q *Queries) CreateLLMServiceConfig(ctx context.Context, arg CreateLLMServiceConfigParams) (LlmServiceConfig, error) {
	row := q.db.QueryRowContext(ctx, createLLMServiceConfig,
		arg.LlmServiceID,
		arg.Name,
		arg.Description,
		arg.Configuration,
	)
	var i LlmServiceConfig
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.Name,
		&i.Description,
		&i.Configuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLLMServiceConfig = `-- name: DeleteLLMServiceConfig :exec
DELETE FROM llm_service_configs 
WHERE id = ?
`

func (q *Queries) DeleteLLMServiceConfig(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLLMServiceConfig, id)
	return err
}

const getAllLLMServiceConfigs = `-- name: GetAllLLMServiceConfigs :many
SELECT id, llm_service_id, name, description, configuration, created_at, updated_at
FROM llm_service_configs 
ORDER BY llm_service_id, name
`

func (q *Queries) GetAllLLMServiceConfigs(ctx context.Context) ([]LlmServiceConfig, error) {
	rows, err := q.db.QueryContext(ctx, getAllLLMServiceConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LlmServiceConfig
	for rows.Next() {
		var i LlmServiceConfig
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceID,
			&i.Name,
			&i.Description,
			&i.Configuration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLLMServiceConfigByID = `-- name: GetLLMServiceConfigByID :one
SELECT id, llm_service_id, name, description, configuration, created_at, updated_at
FROM llm_service_configs 
WHERE id = ?
`

func (q *Queries) GetLLMServiceConfigByID(ctx context.Context, id int64) (LlmServiceConfig, error) {
	row := q.db.QueryRowContext(ctx, getLLMServiceConfigByID, id)
	var i LlmServiceConfig
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.Name,
		&i.Description,
		&i.Configuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLLMServiceConfigByName = `-- name: GetLLMServiceConfigByName :one
SELECT id, llm_service_id, name, description, configuration, created_at, updated_at
FROM llm_service_configs 
WHERE llm_service_id = ? AND name = ?
LIMIT 1
`

type GetLLMServiceConfigByNameParams struct {
	LlmServiceID int64  `json:"llm_service_id"`
	Name         string `json:"name"`
}

func (q *Queries) GetLLMServiceConfigByName(ctx context.Context, arg GetLLMServiceConfigByNameParams) (LlmServiceConfig, error) {
	row := q.db.QueryRowContext(ctx, getLLMServiceConfigByName, arg.LlmServiceID, arg.Name)
	var i LlmServiceConfig
	err := row.Scan(
		&i.ID,
		&i.LlmServiceID,
		&i.Name,
		&i.Description,
		&i.Configuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLLMServiceConfigsByServiceID = `-- name: GetLLMServiceConfigsByServiceID :many
SELECT id, llm_service_id, name, description, configuration, created_at, updated_at
FROM llm_service_configs 
WHERE llm_service_id = ?
ORDER BY name
`

func (q *Queries) GetLLMServiceConfigsByServiceID(ctx context.Context, llmServiceID int64) ([]LlmServiceConfig, error) {
	rows, err := q.db.QueryContext(ctx, getLLMServiceConfigsByServiceID, llmServiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LlmServiceConfig
	for rows.Next() {
		var i LlmServiceConfig
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceID,
			&i.Name,
			&i.Description,
			&i.Configuration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLLMServiceConfig = `-- name: UpdateLLMServiceConfig :exec
UPDATE llm_service_configs 
SET name = ?, description = ?, configuration = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateLLMServiceConfigParams struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Configuration string         `json:"configuration"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateLLMServiceConfig(ctx context.Context, arg UpdateLLMServiceConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateLLMServiceConfig,
		arg.Name,
		arg.Description,
		arg.Configuration,
		arg.ID,
	)
	return err
}
