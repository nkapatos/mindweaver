// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: actors.sql

package store

import (
	"context"
	"database/sql"
)

const createActor = `-- name: CreateActor :one
INSERT INTO actors (uuid, type, name, display_name, avatar_url, metadata, is_active) 
VALUES (?, ?, ?, ?, ?, ?, ?) 
RETURNING id, uuid, type, name, display_name, avatar_url, metadata, is_active, created_at, updated_at
`

type CreateActorParams struct {
	Uuid        string         `json:"uuid"`
	Type        string         `json:"type"`
	Name        string         `json:"name"`
	DisplayName sql.NullString `json:"display_name"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
	Metadata    sql.NullString `json:"metadata"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateActor(ctx context.Context, arg CreateActorParams) (Actor, error) {
	row := q.db.QueryRowContext(ctx, createActor,
		arg.Uuid,
		arg.Type,
		arg.Name,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Metadata,
		arg.IsActive,
	)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.Name,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Metadata,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM actors WHERE id = ?
`

func (q *Queries) DeleteActor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActor, id)
	return err
}

const getActorByID = `-- name: GetActorByID :one
SELECT id, uuid, type, name, display_name, avatar_url, metadata, is_active, created_at, updated_at 
FROM actors 
WHERE id = ? 
LIMIT 1
`

func (q *Queries) GetActorByID(ctx context.Context, id int64) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActorByID, id)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.Name,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Metadata,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActorByName = `-- name: GetActorByName :one
SELECT id, uuid, type, name, display_name, avatar_url, metadata, is_active, created_at, updated_at 
FROM actors 
WHERE name = ? AND type = ? 
LIMIT 1
`

type GetActorByNameParams struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

func (q *Queries) GetActorByName(ctx context.Context, arg GetActorByNameParams) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActorByName, arg.Name, arg.Type)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.Name,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Metadata,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActorByUUID = `-- name: GetActorByUUID :one
SELECT id, uuid, type, name, display_name, avatar_url, metadata, is_active, created_at, updated_at 
FROM actors 
WHERE uuid = ? 
LIMIT 1
`

func (q *Queries) GetActorByUUID(ctx context.Context, uuid string) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActorByUUID, uuid)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.Name,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Metadata,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActorsByType = `-- name: GetActorsByType :many
SELECT id, uuid, type, name, display_name, avatar_url, metadata, is_active, created_at, updated_at 
FROM actors 
WHERE type = ? AND is_active = true 
ORDER BY name
`

func (q *Queries) GetActorsByType(ctx context.Context, type_ string) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, getActorsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Type,
			&i.Name,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.Metadata,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :exec
UPDATE actors 
SET name = ?, display_name = ?, avatar_url = ?, metadata = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateActorParams struct {
	Name        string         `json:"name"`
	DisplayName sql.NullString `json:"display_name"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
	Metadata    sql.NullString `json:"metadata"`
	IsActive    sql.NullBool   `json:"is_active"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) error {
	_, err := q.db.ExecContext(ctx, updateActor,
		arg.Name,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Metadata,
		arg.IsActive,
		arg.ID,
	)
	return err
}
