// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: providers.sql

package store

import (
	"context"
	"database/sql"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (name, description, llm_service_id, system_prompt) 
VALUES (?, ?, ?, ?) 
RETURNING id, name, description, llm_service_id, system_prompt, created_at
`

type CreateProviderParams struct {
	Name         string         `json:"name"`
	Description  string         `json:"description"`
	LlmServiceID sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt sql.NullString `json:"system_prompt"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, createProvider,
		arg.Name,
		arg.Description,
		arg.LlmServiceID,
		arg.SystemPrompt,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.LlmServiceID,
		&i.SystemPrompt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM providers 
WHERE id = ?
`

func (q *Queries) DeleteProvider(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProvider, id)
	return err
}

const getAllProviders = `-- name: GetAllProviders :many
SELECT p.id, p.name, p.description, p.llm_service_id, p.system_prompt, p.created_at,
       ls.name as llm_service_name, ls.adapter, ls.base_url, ls.organization, ls.configuration
FROM providers p
JOIN llm_services ls ON p.llm_service_id = ls.id
ORDER BY p.name
`

type GetAllProvidersRow struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	LlmServiceID   sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt   sql.NullString `json:"system_prompt"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	LlmServiceName string         `json:"llm_service_name"`
	Adapter        string         `json:"adapter"`
	BaseUrl        string         `json:"base_url"`
	Organization   sql.NullString `json:"organization"`
	Configuration  string         `json:"configuration"`
}

func (q *Queries) GetAllProviders(ctx context.Context) ([]GetAllProvidersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProvidersRow
	for rows.Next() {
		var i GetAllProvidersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.LlmServiceID,
			&i.SystemPrompt,
			&i.CreatedAt,
			&i.LlmServiceName,
			&i.Adapter,
			&i.BaseUrl,
			&i.Organization,
			&i.Configuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT p.id, p.name, p.description, p.llm_service_id, p.system_prompt, p.created_at,
       ls.name as llm_service_name, ls.adapter, ls.base_url, ls.organization, ls.configuration
FROM providers p
JOIN llm_services ls ON p.llm_service_id = ls.id
WHERE p.id = ?
`

type GetProviderByIDRow struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	LlmServiceID   sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt   sql.NullString `json:"system_prompt"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	LlmServiceName string         `json:"llm_service_name"`
	Adapter        string         `json:"adapter"`
	BaseUrl        string         `json:"base_url"`
	Organization   sql.NullString `json:"organization"`
	Configuration  string         `json:"configuration"`
}

func (q *Queries) GetProviderByID(ctx context.Context, id int64) (GetProviderByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProviderByID, id)
	var i GetProviderByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.LlmServiceID,
		&i.SystemPrompt,
		&i.CreatedAt,
		&i.LlmServiceName,
		&i.Adapter,
		&i.BaseUrl,
		&i.Organization,
		&i.Configuration,
	)
	return i, err
}

const getProviderByName = `-- name: GetProviderByName :one
SELECT p.id, p.name, p.description, p.llm_service_id, p.system_prompt, p.created_at,
       ls.name as llm_service_name, ls.adapter, ls.base_url, ls.organization, ls.configuration
FROM providers p
JOIN llm_services ls ON p.llm_service_id = ls.id
WHERE p.name = ?
LIMIT 1
`

type GetProviderByNameRow struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	LlmServiceID   sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt   sql.NullString `json:"system_prompt"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	LlmServiceName string         `json:"llm_service_name"`
	Adapter        string         `json:"adapter"`
	BaseUrl        string         `json:"base_url"`
	Organization   sql.NullString `json:"organization"`
	Configuration  string         `json:"configuration"`
}

func (q *Queries) GetProviderByName(ctx context.Context, name string) (GetProviderByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getProviderByName, name)
	var i GetProviderByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.LlmServiceID,
		&i.SystemPrompt,
		&i.CreatedAt,
		&i.LlmServiceName,
		&i.Adapter,
		&i.BaseUrl,
		&i.Organization,
		&i.Configuration,
	)
	return i, err
}

const getProvidersByLLMService = `-- name: GetProvidersByLLMService :many
SELECT p.id, p.name, p.description, p.llm_service_id, p.system_prompt, p.created_at,
       ls.name as llm_service_name, ls.adapter, ls.base_url, ls.organization, ls.configuration
FROM providers p
JOIN llm_services ls ON p.llm_service_id = ls.id
WHERE p.llm_service_id = ?
ORDER BY p.name
`

type GetProvidersByLLMServiceRow struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	LlmServiceID   sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt   sql.NullString `json:"system_prompt"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	LlmServiceName string         `json:"llm_service_name"`
	Adapter        string         `json:"adapter"`
	BaseUrl        string         `json:"base_url"`
	Organization   sql.NullString `json:"organization"`
	Configuration  string         `json:"configuration"`
}

func (q *Queries) GetProvidersByLLMService(ctx context.Context, llmServiceID sql.NullInt64) ([]GetProvidersByLLMServiceRow, error) {
	rows, err := q.db.QueryContext(ctx, getProvidersByLLMService, llmServiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProvidersByLLMServiceRow
	for rows.Next() {
		var i GetProvidersByLLMServiceRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.LlmServiceID,
			&i.SystemPrompt,
			&i.CreatedAt,
			&i.LlmServiceName,
			&i.Adapter,
			&i.BaseUrl,
			&i.Organization,
			&i.Configuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :exec
UPDATE providers 
SET name = ?, description = ?, llm_service_id = ?, system_prompt = ? 
WHERE id = ?
`

type UpdateProviderParams struct {
	Name         string         `json:"name"`
	Description  string         `json:"description"`
	LlmServiceID sql.NullInt64  `json:"llm_service_id"`
	SystemPrompt sql.NullString `json:"system_prompt"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) error {
	_, err := q.db.ExecContext(ctx, updateProvider,
		arg.Name,
		arg.Description,
		arg.LlmServiceID,
		arg.SystemPrompt,
		arg.ID,
	)
	return err
}
