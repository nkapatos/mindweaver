// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: providers.sql

package store

import (
	"context"
	"database/sql"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (llm_service_config_id, system_prompt_id, name, description, created_by, updated_by) 
VALUES (?, ?, ?, ?, ?, ?) 
RETURNING id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
`

type CreateProviderParams struct {
	LlmServiceConfigID int64          `json:"llm_service_config_id"`
	SystemPromptID     sql.NullInt64  `json:"system_prompt_id"`
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	CreatedBy          int64          `json:"created_by"`
	UpdatedBy          int64          `json:"updated_by"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, createProvider,
		arg.LlmServiceConfigID,
		arg.SystemPromptID,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.LlmServiceConfigID,
		&i.SystemPromptID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM providers 
WHERE id = ?
`

func (q *Queries) DeleteProvider(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProvider, id)
	return err
}

const getAllProviders = `-- name: GetAllProviders :many
SELECT id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
FROM providers
ORDER BY name
`

func (q *Queries) GetAllProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, getAllProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceConfigID,
			&i.SystemPromptID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
FROM providers
WHERE id = ?
`

func (q *Queries) GetProviderByID(ctx context.Context, id int64) (Provider, error) {
	row := q.db.QueryRowContext(ctx, getProviderByID, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.LlmServiceConfigID,
		&i.SystemPromptID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getProviderByName = `-- name: GetProviderByName :one
SELECT id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
FROM providers
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetProviderByName(ctx context.Context, name string) (Provider, error) {
	row := q.db.QueryRowContext(ctx, getProviderByName, name)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.LlmServiceConfigID,
		&i.SystemPromptID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getProvidersByLLMServiceConfig = `-- name: GetProvidersByLLMServiceConfig :many
SELECT id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
FROM providers
WHERE llm_service_config_id = ?
ORDER BY name
`

func (q *Queries) GetProvidersByLLMServiceConfig(ctx context.Context, llmServiceConfigID int64) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, getProvidersByLLMServiceConfig, llmServiceConfigID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceConfigID,
			&i.SystemPromptID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvidersBySystemPrompt = `-- name: GetProvidersBySystemPrompt :many
SELECT id, llm_service_config_id, system_prompt_id, name, description, created_at, updated_at, created_by, updated_by
FROM providers
WHERE system_prompt_id = ?
ORDER BY name
`

func (q *Queries) GetProvidersBySystemPrompt(ctx context.Context, systemPromptID sql.NullInt64) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, getProvidersBySystemPrompt, systemPromptID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.LlmServiceConfigID,
			&i.SystemPromptID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :exec
UPDATE providers 
SET llm_service_config_id = ?, system_prompt_id = ?, name = ?, description = ?, updated_at = CURRENT_TIMESTAMP, updated_by = ? 
WHERE id = ?
`

type UpdateProviderParams struct {
	LlmServiceConfigID int64          `json:"llm_service_config_id"`
	SystemPromptID     sql.NullInt64  `json:"system_prompt_id"`
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	UpdatedBy          int64          `json:"updated_by"`
	ID                 int64          `json:"id"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) error {
	_, err := q.db.ExecContext(ctx, updateProvider,
		arg.LlmServiceConfigID,
		arg.SystemPromptID,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
